apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.mysql.service.name }}
spec:
  serviceName: {{ .Values.mysql.service.name }}
  replicas: {{ .Values.mysql.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.mysql.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.mysql.service.name }}
    spec:
      containers:
        - name: mysql
          image: {{ .Values.mysql.image }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.service.name }}-secret
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              value: {{ .Values.mysql.database | quote }}
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.service.name }}-secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.service.name }}-secret
                  key: MYSQL_PASSWORD
          ports:
            - containerPort: {{ .Values.mysql.service.port }}
              name: mysql
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
            - name: mysql-config
              mountPath: /etc/mysql/conf.d
          readinessProbe:
            exec:
              command: ["mysqladmin", "ping", "-h", "localhost"]
            initialDelaySeconds: 20
            periodSeconds: 10
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping", "-h", "localhost"]
            initialDelaySeconds: 60
            periodSeconds: 15
      volumes:
        - name: mysql-config
          configMap:
            name: {{ .Values.mysql.service.name }}-config
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: {{ .Values.mysql.service.name }}-pvc

