
# Prometheus + Grafana + Alertmanager + Slack Integration Guide

## 1. Overview
This guide details how to install, configure, and connect:
- Prometheus (metrics collection)
- Node Exporter (system metrics)
- Alertmanager (alert dispatch)
- Grafana (visualization)
- Slack (notifications)

Data Flow:
Node Exporter → Prometheus → Alertmanager → Slack
                          ↘ Grafana

---

## 2. Installation

### Node Exporter
```bash
wget https://github.com/prometheus/node_exporter/releases/download/v1.8.1/node_exporter-1.8.1.linux-amd64.tar.gz
tar xvf node_exporter-1.8.1.linux-amd64.tar.gz
cd node_exporter-1.8.1.linux-amd64
./node_exporter &
```
Visit: http://localhost:9100/metrics

### Prometheus
```bash
wget https://github.com/prometheus/prometheus/releases/download/v2.53.0/prometheus-2.53.0.linux-amd64.tar.gz
tar xvf prometheus-2.53.0.linux-amd64.tar.gz
cd prometheus-2.53.0.linux-amd64
```
Create `prometheus.yml`:
```yaml
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: "prometheus"
    static_configs:
      - targets: ["localhost:9090"]

  - job_name: "node_exporter"
    static_configs:
      - targets: ["localhost:9100"]
      
alerting:
  alertmanagers:
    - static_configs:
        - targets: ["localhost:9093"]

rule_files:
  - "alert_rules.yml"
```

### Alert Rules
Create `alert_rules.yml`:
```yaml
groups:
  - name: CPU Alerts
    rules:
      - alert: HighCPUUsage
        expr: (1 - avg by(instance)(rate(node_cpu_seconds_total{mode="idle"}[2m]))) * 100 > 80
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage on {{ $labels.instance }}"
          description: "CPU usage is above 80% for more than 2 minutes."
```

Run Prometheus:
```bash
./prometheus --config.file=prometheus.yml
```
Access: http://localhost:9090

---

## 3. Alertmanager Setup
```bash
wget https://github.com/prometheus/alertmanager/releases/download/v0.27.0/alertmanager-0.27.0.linux-amd64.tar.gz
tar xvf alertmanager-0.27.0.linux-amd64.tar.gz
cd alertmanager-0.27.0.linux-amd64
```
Create `alertmanager.yml`:
```yaml
global:
  resolve_timeout: 5m

route:
  receiver: 'slack-notifications'

receivers:
  - name: 'slack-notifications'
    slack_configs:
      - send_resolved: true
        channel: '#your-channel'
        username: 'AlertManager'
        api_url: 'https://hooks.slack.com/services/XXXX/YYYY/ZZZZ'
```
Run:
```bash
./alertmanager --config.file=alertmanager.yml
```
Visit: http://localhost:9093

---

## 4. Slack Webhook Setup
1. Go to https://api.slack.com/apps
2. Create App → “Incoming Webhooks” → Enable Webhooks
3. Add webhook to your workspace
4. Copy webhook URL → paste into `alertmanager.yml`

---

## 5. Grafana Setup
```bash
sudo apt install -y apt-transport-https software-properties-common
sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
sudo apt install grafana -y
sudo systemctl enable --now grafana-server
```
Access: http://localhost:3000  
Login: `admin / admin`

Add Prometheus as data source → URL: `http://localhost:9090`

Import Dashboard ID: **1860** (Node Exporter Full)

---

## 6. Test Alerts
Use `stress` to trigger CPU usage:
```bash
sudo apt install stress -y
stress --cpu 8 --timeout 300
```
If CPU > 80% for 2 minutes → Slack alert triggered.

---

## 7. Systemd Services

### Prometheus
`/etc/systemd/system/prometheus.service`
```ini
[Unit]
Description=Prometheus Monitoring
After=network.target

[Service]
ExecStart=/usr/local/bin/prometheus --config.file=/home/khe/prometheus.yml
Restart=always

[Install]
WantedBy=multi-user.target
```

### Alertmanager
`/etc/systemd/system/alertmanager.service`
```ini
[Unit]
Description=Prometheus Alertmanager
After=network.target

[Service]
ExecStart=/usr/local/bin/alertmanager --config.file=/home/khe/alertmanager.yml
Restart=always

[Install]
WantedBy=multi-user.target
```

Enable services:
```bash
sudo systemctl daemon-reload
sudo systemctl enable --now prometheus alertmanager
```

---

## 8. Summary Table

| Component | Port | Role |
|------------|------|------|
| Prometheus | 9090 | Collect metrics & evaluate alerts |
| Node Exporter | 9100 | Expose host metrics |
| Alertmanager | 9093 | Manage & route alerts |
| Grafana | 3000 | Visual dashboards |
| Slack | — | Receive alert notifications |

---

## 9. Alert Flow
1. Node Exporter → Prometheus scrapes metrics.  
2. Prometheus evaluates alert rules.  
3. Alert triggers → sent to Alertmanager.  
4. Alertmanager → posts to Slack via webhook.  
5. Grafana shows CPU spikes in dashboard.

---

## 10. References
- https://prometheus.io/docs/
- https://grafana.com/docs/
- https://api.slack.com/messaging/webhooks
